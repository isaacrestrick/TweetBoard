{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMultipleAccounts = exports.invoke = void 0;\n\nvar buffer_1 = require(\"buffer\");\n\nvar assert_1 = __importDefault(require(\"assert\"));\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar common_js_1 = require(\"../utils/common.js\");\n\nvar common_js_2 = require(\"../program/common.js\");\n\nvar provider_js_1 = require(\"../provider.js\");\n/**\n * Sends a transaction to a program with the given accounts and instruction\n * data.\n */\n\n\nfunction invoke(_x, _x2, _x3, _x4) {\n  return _invoke.apply(this, arguments);\n}\n\nfunction _invoke() {\n  _invoke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(programId, accounts, data, provider) {\n    var tx;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            programId = (0, common_js_2.translateAddress)(programId);\n\n            if (!provider) {\n              provider = (0, provider_js_1.getProvider)();\n            }\n\n            tx = new web3_js_1.Transaction();\n            tx.add(new web3_js_1.TransactionInstruction({\n              programId: programId,\n              keys: accounts !== null && accounts !== void 0 ? accounts : [],\n              data: data\n            }));\n            _context.next = 6;\n            return provider.send(tx);\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _invoke.apply(this, arguments);\n}\n\nexports.invoke = invoke;\nvar GET_MULTIPLE_ACCOUNTS_LIMIT = 99;\n\nfunction getMultipleAccounts(_x5, _x6, _x7) {\n  return _getMultipleAccounts.apply(this, arguments);\n}\n\nfunction _getMultipleAccounts() {\n  _getMultipleAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection, publicKeys, commitment) {\n    var batches, results;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(publicKeys.length <= GET_MULTIPLE_ACCOUNTS_LIMIT)) {\n              _context2.next = 6;\n              break;\n            }\n\n            _context2.next = 3;\n            return getMultipleAccountsCore(connection, publicKeys, commitment);\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 6:\n            batches = (0, common_js_1.chunks)(publicKeys, GET_MULTIPLE_ACCOUNTS_LIMIT);\n            _context2.next = 9;\n            return Promise.all(batches.map(function (batch) {\n              return getMultipleAccountsCore(connection, batch, commitment);\n            }));\n\n          case 9:\n            results = _context2.sent;\n            return _context2.abrupt(\"return\", results.flat());\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getMultipleAccounts.apply(this, arguments);\n}\n\nexports.getMultipleAccounts = getMultipleAccounts;\n\nfunction getMultipleAccountsCore(_x8, _x9, _x10) {\n  return _getMultipleAccountsCore.apply(this, arguments);\n}\n\nfunction _getMultipleAccountsCore() {\n  _getMultipleAccountsCore = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection, publicKeys, commitmentOverride) {\n    var commitment, args, res, accounts, _iterator, _step, account, value, executable, owner, lamports, data;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            commitment = commitmentOverride !== null && commitmentOverride !== void 0 ? commitmentOverride : connection.commitment;\n            args = [publicKeys.map(function (k) {\n              return k.toBase58();\n            })];\n\n            if (commitment) {\n              args.push({\n                commitment: commitment\n              });\n            } // @ts-ignore\n\n\n            _context3.next = 5;\n            return connection._rpcRequest(\"getMultipleAccounts\", args);\n\n          case 5:\n            res = _context3.sent;\n\n            if (!res.error) {\n              _context3.next = 8;\n              break;\n            }\n\n            throw new Error(\"failed to get info about accounts \" + publicKeys.map(function (k) {\n              return k.toBase58();\n            }).join(\", \") + \": \" + res.error.message);\n\n          case 8:\n            (0, assert_1.default)(typeof res.result !== \"undefined\");\n            accounts = [];\n            _iterator = _createForOfIteratorHelper(res.result.value);\n            _context3.prev = 11;\n\n            _iterator.s();\n\n          case 13:\n            if ((_step = _iterator.n()).done) {\n              _context3.next = 25;\n              break;\n            }\n\n            account = _step.value;\n            value = null;\n\n            if (!(account === null)) {\n              _context3.next = 19;\n              break;\n            }\n\n            accounts.push(null);\n            return _context3.abrupt(\"continue\", 23);\n\n          case 19:\n            if (res.result.value) {\n              executable = account.executable, owner = account.owner, lamports = account.lamports, data = account.data;\n              (0, assert_1.default)(data[1] === \"base64\");\n              value = {\n                executable: executable,\n                owner: new web3_js_1.PublicKey(owner),\n                lamports: lamports,\n                data: buffer_1.Buffer.from(data[0], \"base64\")\n              };\n            }\n\n            if (!(value === null)) {\n              _context3.next = 22;\n              break;\n            }\n\n            throw new Error(\"Invalid response\");\n\n          case 22:\n            accounts.push(value);\n\n          case 23:\n            _context3.next = 13;\n            break;\n\n          case 25:\n            _context3.next = 30;\n            break;\n\n          case 27:\n            _context3.prev = 27;\n            _context3.t0 = _context3[\"catch\"](11);\n\n            _iterator.e(_context3.t0);\n\n          case 30:\n            _context3.prev = 30;\n\n            _iterator.f();\n\n            return _context3.finish(30);\n\n          case 33:\n            return _context3.abrupt(\"return\", accounts.map(function (account, idx) {\n              if (account === null) {\n                return null;\n              }\n\n              return {\n                publicKey: publicKeys[idx],\n                account: account\n              };\n            }));\n\n          case 34:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[11, 27, 30, 33]]);\n  }));\n  return _getMultipleAccountsCore.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}