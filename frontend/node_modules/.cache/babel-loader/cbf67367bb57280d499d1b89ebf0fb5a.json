{"ast":null,"code":"import _regeneratorRuntime from \"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/src/App.js\",\n    _this = this;\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { TwitterTweetEmbed } from 'react-twitter-embed';\nimport { Program, Provider, web3, BN } from '@project-serum/anchor';\nimport idl from './idl.json';\nimport kp from './keypair.json';\n\nfunction TweetBox(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wrapper\",\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 44\n    }\n  }, \"#\", props.rank)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TwitterTweetEmbed, {\n    tweetId: getTweetID(props.link),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 30\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 30\n    }\n  }, \"Posted by \", props.poster)));\n} // SystemProgram is a reference to the Solana runtime!\n\n\nvar SystemProgram = web3.SystemProgram,\n    Keypair = web3.Keypair; // Create a keypair for the account that will hold the GIF data.\n\nvar arr = Object.values(kp._keypair.secretKey);\nvar secret = new Uint8Array(arr);\nvar baseAccount = web3.Keypair.fromSecretKey(secret); // Get our program's id from the IDL file.\n\nvar programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nvar network = clusterApiUrl('devnet'); // Controls how we want to acknowledge when a transaction is \"done\".\n\nvar opts = {\n  preflightCommitment: \"processed\"\n};\n\nfunction getTweetID(tweetURL) {\n  var pathComponents = tweetURL.split(\"/\");\n  var idWithQuery = pathComponents[pathComponents.length - 1];\n  var tweetId = idWithQuery.split(\"?\")[0];\n  return tweetId;\n}\n\nfunction isResubmission(tweet_id, list_of_tweets) {\n  for (var tweet in list_of_tweets) {\n    if (tweet['tweetId'] === tweet_id) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar App = function App() {\n  // State\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      walletAddress = _useState2[0],\n      setWalletAddress = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputValueTweet = _useState4[0],\n      setInputValueTweet = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      inputValueEffort = _useState6[0],\n      setInputValueEffort = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      inputValueReward = _useState8[0],\n      setInputValueReward = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      tweets = _useState10[0],\n      setTweets = _useState10[1];\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n\n\n  var checkIfWalletIsConnected = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _window, solana, response;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _window = window, solana = _window.solana;\n\n              if (!solana) {\n                _context.next = 12;\n                break;\n              }\n\n              if (!solana.isPhantom) {\n                _context.next = 10;\n                break;\n              }\n\n              console.log('Phantom wallet found!');\n              /*\n               * The solana object gives us a function that will allow us to\n               * connect directly with the user's wallet!\n               */\n\n              _context.next = 7;\n              return solana.connect({\n                onlyIfTrusted: true\n              });\n\n            case 7:\n              response = _context.sent;\n              console.log('Connected with Public Key:', response.publicKey.toString());\n              /*\n               * Set the user's publicKey in state to be used later!\n               */\n\n              setWalletAddress(response.publicKey.toString());\n\n            case 10:\n              _context.next = 13;\n              break;\n\n            case 12:\n              alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n\n            case 13:\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 15]]);\n    }));\n\n    return function checkIfWalletIsConnected() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n\n\n  var connectWallet = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _window2, solana, response;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _window2 = window, solana = _window2.solana;\n\n              if (!solana) {\n                _context2.next = 7;\n                break;\n              }\n\n              _context2.next = 4;\n              return solana.connect();\n\n            case 4:\n              response = _context2.sent;\n              console.log('Connected with Public Key:', response.publicKey.toString());\n              setWalletAddress(response.publicKey.toString());\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function connectWallet() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var sendTweet = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var provider, program, account, tweetID, resubmission;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(inputValueTweet.length === 0)) {\n                _context3.next = 3;\n                break;\n              }\n\n              console.log(\"not a tweet\"); //could be better\n\n              return _context3.abrupt(\"return\");\n\n            case 3:\n              setInputValueTweet('');\n              console.log('Link to tweet:', inputValueTweet);\n              _context3.prev = 5;\n              provider = getProvider();\n              program = new Program(idl, programID, provider);\n              _context3.next = 10;\n              return program.account.baseAccount.fetch(baseAccount.publicKey);\n\n            case 10:\n              account = _context3.sent;\n              tweetID = getTweetID(inputValueTweet);\n              resubmission = isResubmission(tweetID, account.tweets);\n\n              if (resubmission) {\n                _context3.next = 24;\n                break;\n              }\n\n              if (!(inputValueEffort.length === 0 || inputValueReward === 0)) {\n                _context3.next = 17;\n                break;\n              }\n\n              console.log(\"need effort & reward for a new tweet\");\n              return _context3.abrupt(\"return\");\n\n            case 17:\n              setInputValueTweet('');\n              setInputValueEffort('');\n              setInputValueReward('');\n              _context3.next = 22;\n              return program.rpc.submitTweet(new BN(parseInt(tweetID)), new BN(inputValueEffort), new BN(inputValueReward), {\n                accounts: {\n                  baseAccount: baseAccount.publicKey,\n                  user: provider.wallet.publicKey\n                }\n              });\n\n            case 22:\n              _context3.next = 26;\n              break;\n\n            case 24:\n              _context3.next = 26;\n              return program.rpc.resubmitTweet(new BN(parseInt(tweetID)), {\n                accounts: {\n                  baseAccount: baseAccount.publicKey,\n                  user: provider.wallet.publicKey\n                }\n              });\n\n            case 26:\n              _context3.next = 28;\n              return getTweets();\n\n            case 28:\n              _context3.next = 33;\n              break;\n\n            case 30:\n              _context3.prev = 30;\n              _context3.t0 = _context3[\"catch\"](5);\n              console.log(\"Error sending tweet:\", _context3.t0);\n\n            case 33:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[5, 30]]);\n    }));\n\n    return function sendTweet() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n\n\n  var renderNotConnectedContainer = function renderNotConnectedContainer() {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: \"cta-button connect-wallet-button\",\n      onClick: connectWallet,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 5\n      }\n    }, \"Connect to Wallet\");\n  };\n\n  var onInputChangeTweet = function onInputChangeTweet(event) {\n    var value = event.target.value;\n    setInputValueTweet(value);\n  };\n\n  var onInputChangeReward = function onInputChangeReward(event) {\n    var value = event.target.value;\n    setInputValueReward(value);\n  };\n\n  var onInputChangeEffort = function onInputChangeEffort(event) {\n    var value = event.target.value;\n    setInputValueEffort(value);\n  };\n\n  var getProvider = function getProvider() {\n    var connection = new Connection(network, opts.preflightCommitment);\n    var provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  var createTweetAccount = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var provider, program;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              provider = getProvider();\n              program = new Program(idl, programID, provider);\n              _context4.next = 5;\n              return program.rpc.start({\n                accounts: {\n                  baseAccount: baseAccount.publicKey,\n                  user: provider.wallet.publicKey,\n                  systemProgram: SystemProgram.programId\n                },\n                signers: [baseAccount]\n              });\n\n            case 5:\n              console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n              _context4.next = 8;\n              return getTweets();\n\n            case 8:\n              _context4.next = 13;\n              break;\n\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.log(\"Error creating BaseAccount account:\", _context4.t0);\n\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 10]]);\n    }));\n\n    return function createTweetAccount() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var renderConnectedContainer = function renderConnectedContainer() {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (tweets === null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"connected-container\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"cta-button submit-gif-button\",\n        onClick: createTweetAccount,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }\n      }, \"Do One-Time Initialization For Tweet Program Account\"));\n    } // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"connected-container\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          sendTweet();\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter a link to a tweet\",\n        value: inputValueTweet,\n        onChange: onInputChangeTweet,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter effort (# resubmissions)\",\n        value: inputValueEffort,\n        onChange: onInputChangeEffort,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter reward (# tokens)\",\n        value: inputValueReward,\n        onChange: onInputChangeReward,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"cta-button submit-gif-button\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }\n      }, \"Submit\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"gif-grid\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }\n      }, tweets.map(function (item, index) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"gif-item\",\n          key: index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(TwitterTweetEmbed, {\n          tweetId: getTweetID(item.tweetId),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 17\n          }\n        }));\n      })));\n    }\n  }; //<img src={item.gifLink} />\n  //                <TwitterTweetEmbed tweetId={getTweetID(item.gifLink)}/>\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n\n\n  useEffect(function () {\n    var onLoad = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return checkIfWalletIsConnected();\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function onLoad() {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    window.addEventListener('load', onLoad);\n    return function () {\n      return window.removeEventListener('load', onLoad);\n    };\n  }, []);\n\n  var getTweets = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var provider, program, account;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              provider = getProvider();\n              program = new Program(idl, programID, provider);\n              _context6.next = 5;\n              return program.account.baseAccount.fetch(baseAccount.publicKey);\n\n            case 5:\n              account = _context6.sent;\n              console.log(\"Got the account\", account);\n              setTweets(account.tweets);\n              _context6.next = 14;\n              break;\n\n            case 10:\n              _context6.prev = 10;\n              _context6.t0 = _context6[\"catch\"](0);\n              console.log(\"Error in getTweets: \", _context6.t0);\n              setTweets(null);\n\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[0, 10]]);\n    }));\n\n    return function getTweets() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (walletAddress) {\n      console.log('Fetching tweets...');\n      getTweets();\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: walletAddress ? 'authed-container' : 'container',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 11\n    }\n  }, \"Something Portal\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"sub-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 11\n    }\n  }, \"Something collection\"), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer())));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/src/App.js"],"names":["React","useEffect","useState","Connection","PublicKey","clusterApiUrl","TwitterTweetEmbed","Program","Provider","web3","BN","idl","kp","TweetBox","props","rank","getTweetID","link","poster","SystemProgram","Keypair","arr","Object","values","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","metadata","address","network","opts","preflightCommitment","tweetURL","pathComponents","split","idWithQuery","length","tweetId","isResubmission","tweet_id","list_of_tweets","tweet","App","walletAddress","setWalletAddress","inputValueTweet","setInputValueTweet","inputValueEffort","setInputValueEffort","inputValueReward","setInputValueReward","tweets","setTweets","checkIfWalletIsConnected","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","sendTweet","provider","getProvider","program","account","fetch","tweetID","resubmission","rpc","submitTweet","parseInt","accounts","user","wallet","resubmitTweet","getTweets","renderNotConnectedContainer","onInputChangeTweet","event","value","target","onInputChangeReward","onInputChangeEffort","connection","createTweetAccount","start","systemProgram","programId","signers","renderConnectedContainer","preventDefault","map","item","index","onLoad","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport {TwitterTweetEmbed} from 'react-twitter-embed';\nimport {\n  Program, Provider, web3, BN\n} from '@project-serum/anchor';\n\nimport idl from './idl.json';\nimport kp from './keypair.json'\n\nfunction TweetBox(props) {\n  return <div>\n    <div className='wrapper' color='white'><h1>#{props.rank}</h1></div>\n    <div className='wrapper'><TwitterTweetEmbed tweetId={getTweetID(props.link)}/></div>\n    <div className='wrapper'><h3>Posted by {props.poster}</h3></div>\n  </div>\n}\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nfunction getTweetID(tweetURL) {\n  const pathComponents = tweetURL.split(\"/\");\n  const idWithQuery = pathComponents[pathComponents.length-1];\n  const tweetId = idWithQuery.split(\"?\")[0];\n  return tweetId\n}\n\nfunction isResubmission(tweet_id,list_of_tweets) {\n  for (const tweet in list_of_tweets) {\n    if (tweet['tweetId'] === tweet_id) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconst App = () => {\n  // State\nconst [walletAddress, setWalletAddress] = useState(null);\nconst [inputValueTweet, setInputValueTweet] = useState('');\nconst [inputValueEffort, setInputValueEffort] = useState(0);\nconst [inputValueReward, setInputValueReward] = useState(0);\n\nconst [tweets, setTweets] = useState([]);\n\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n\n        /*\n         * The solana object gives us a function that will allow us to\n         * connect directly with the user's wallet!\n         */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n  const { solana } = window;\n\n  if (solana) {\n    const response = await solana.connect();\n    console.log('Connected with Public Key:', response.publicKey.toString());\n    setWalletAddress(response.publicKey.toString());\n  }\n};\n\nconst sendTweet = async () => {\n  if (inputValueTweet.length === 0) {\n    console.log(\"not a tweet\")\n    //could be better\n    return\n  }\n  setInputValueTweet('');\n  console.log('Link to tweet:', inputValueTweet);\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n    \n    const tweetID = getTweetID(inputValueTweet)\n    const resubmission = isResubmission(tweetID, account.tweets)\n    if (!resubmission) {\n      if (inputValueEffort.length === 0 || inputValueReward === 0) {\n        console.log(\"need effort & reward for a new tweet\")\n        return\n      }\n      setInputValueTweet('');\n      setInputValueEffort('');\n      setInputValueReward('');\n      await program.rpc.submitTweet(new BN(parseInt(tweetID)),new BN((inputValueEffort)),new BN((inputValueReward)), {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n    }\n    else {\n      await program.rpc.resubmitTweet(new BN(parseInt(tweetID)), {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n    }\n    await getTweets();\n  } catch (error) {\n    console.log(\"Error sending tweet:\", error)\n  }\n};\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const onInputChangeTweet = (event) => {\n  const { value } = event.target;\n  setInputValueTweet(value);\n  };\n\n  const onInputChangeReward = (event) => {\n  const { value } = event.target;\n  setInputValueReward(value);\n  };\n\n  const onInputChangeEffort = (event) => {\n  const { value } = event.target;\n  setInputValueEffort(value);\n  };\n\nconst getProvider = () => {\n  const connection = new Connection(network, opts.preflightCommitment);\n  const provider = new Provider(\n    connection, window.solana, opts.preflightCommitment,\n  );\n\treturn provider;\n}\nconst createTweetAccount = async () => {\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    await program.rpc.start({\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: provider.wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      },\n      signers: [baseAccount]\n    });\n    console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n    await getTweets();\n\n  } catch(error) {\n    console.log(\"Error creating BaseAccount account:\", error)\n  }\n}\n\nconst renderConnectedContainer = () => {\n  // If we hit this, it means the program account hasn't been initialized.\n    if (tweets === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createTweetAccount}>\n            Do One-Time Initialization For Tweet Program Account\n          </button>\n        </div>\n      )\n    } \n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return(\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendTweet();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter a link to a tweet\"\n              value={inputValueTweet}\n              onChange={onInputChangeTweet}\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Enter effort (# resubmissions)\"\n              value={inputValueEffort}\n              onChange={onInputChangeEffort}\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Enter reward (# tokens)\"\n              value={inputValueReward}\n              onChange={onInputChangeReward}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {tweets.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <TwitterTweetEmbed tweetId={getTweetID(item.tweetId)}/>\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  }\n  //<img src={item.gifLink} />\n  //                <TwitterTweetEmbed tweetId={getTweetID(item.gifLink)}/>\n\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getTweets = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setTweets(account.tweets)\n  \n    } catch (error) {\n      console.log(\"Error in getTweets: \", error)\n      setTweets(null);\n    }\n  }\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching tweets...');\n      getTweets()\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n\t\t\t{/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">Something Portal</p>\n          <p className=\"sub-text\">\n            Something collection\n          </p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n        {walletAddress && renderConnectedContainer()}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default App;"]},"metadata":{},"sourceType":"module"}