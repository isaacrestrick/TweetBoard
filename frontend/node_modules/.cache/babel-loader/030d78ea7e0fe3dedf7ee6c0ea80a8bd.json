{"ast":null,"code":"\"use strict\";\n\nvar _possibleConstructorReturn = require(\"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar _regeneratorRuntime = require(\"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProvider = exports.setProvider = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar index_js_1 = require(\"./utils/bytes/index.js\");\n\nvar common_js_1 = require(\"./utils/common.js\");\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n */\n\n\nvar Provider = /*#__PURE__*/function () {\n  /**\n   * @param connection The cluster connection where the program is deployed.\n   * @param wallet     The wallet used to pay for and sign all transactions.\n   * @param opts       Transaction confirmation options to use by default.\n   */\n  function Provider(connection, wallet, opts) {\n    _classCallCheck(this, Provider);\n\n    this.connection = connection;\n    this.wallet = wallet;\n    this.opts = opts;\n  }\n\n  _createClass(Provider, [{\n    key: \"send\",\n\n    /**\n     * Sends the given transaction, paid for and signed by the provider's wallet.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The set of signers in addition to the provider wallet that\n     *                will sign the transaction.\n     * @param opts    Transaction confirmation options.\n     */\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tx, signers, opts) {\n        var _a, rawTx, failedTx, logs;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (signers === undefined) {\n                  signers = [];\n                }\n\n                if (opts === undefined) {\n                  opts = this.opts;\n                }\n\n                tx.feePayer = this.wallet.publicKey;\n                _context.next = 5;\n                return this.connection.getRecentBlockhash(opts.preflightCommitment);\n\n              case 5:\n                tx.recentBlockhash = _context.sent.blockhash;\n                _context.next = 8;\n                return this.wallet.signTransaction(tx);\n\n              case 8:\n                tx = _context.sent;\n                signers.filter(function (s) {\n                  return s !== undefined;\n                }).forEach(function (kp) {\n                  tx.partialSign(kp);\n                });\n                rawTx = tx.serialize();\n                _context.prev = 11;\n                _context.next = 14;\n                return sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n\n              case 14:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](11);\n\n                if (!(_context.t0 instanceof ConfirmError)) {\n                  _context.next = 31;\n                  break;\n                }\n\n                _context.next = 22;\n                return this.connection.getTransaction(index_js_1.bs58.encode(tx.signature), {\n                  commitment: \"confirmed\"\n                });\n\n              case 22:\n                failedTx = _context.sent;\n\n                if (failedTx) {\n                  _context.next = 27;\n                  break;\n                }\n\n                throw _context.t0;\n\n              case 27:\n                logs = (_a = failedTx.meta) === null || _a === void 0 ? void 0 : _a.logMessages;\n                throw !logs ? _context.t0 : new web3_js_1.SendTransactionError(_context.t0.message, logs);\n\n              case 29:\n                _context.next = 32;\n                break;\n\n              case 31:\n                throw _context.t0;\n\n              case 32:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[11, 17]]);\n      }));\n\n      function send(_x, _x2, _x3) {\n        return _send.apply(this, arguments);\n      }\n\n      return send;\n    }()\n    /**\n     * Similar to `send`, but for an array of transactions and signers.\n     */\n\n  }, {\n    key: \"sendAll\",\n    value: function () {\n      var _sendAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(reqs, opts) {\n        var _this = this;\n\n        var blockhash, txs, signedTxs, sigs, k, tx, rawTx;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (opts === undefined) {\n                  opts = this.opts;\n                }\n\n                _context2.next = 3;\n                return this.connection.getRecentBlockhash(opts.preflightCommitment);\n\n              case 3:\n                blockhash = _context2.sent;\n                txs = reqs.map(function (r) {\n                  var tx = r.tx;\n                  var signers = r.signers;\n\n                  if (signers === undefined) {\n                    signers = [];\n                  }\n\n                  tx.feePayer = _this.wallet.publicKey;\n                  tx.recentBlockhash = blockhash.blockhash;\n                  signers.filter(function (s) {\n                    return s !== undefined;\n                  }).forEach(function (kp) {\n                    tx.partialSign(kp);\n                  });\n                  return tx;\n                });\n                _context2.next = 7;\n                return this.wallet.signAllTransactions(txs);\n\n              case 7:\n                signedTxs = _context2.sent;\n                sigs = [];\n                k = 0;\n\n              case 10:\n                if (!(k < txs.length)) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                tx = signedTxs[k];\n                rawTx = tx.serialize();\n                _context2.t0 = sigs;\n                _context2.next = 16;\n                return sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n\n              case 16:\n                _context2.t1 = _context2.sent;\n\n                _context2.t0.push.call(_context2.t0, _context2.t1);\n\n              case 18:\n                k += 1;\n                _context2.next = 10;\n                break;\n\n              case 21:\n                return _context2.abrupt(\"return\", sigs);\n\n              case 22:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function sendAll(_x4, _x5) {\n        return _sendAll.apply(this, arguments);\n      }\n\n      return sendAll;\n    }()\n    /**\n     * Simulates the given transaction, returning emitted logs from execution.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The set of signers in addition to the provdier wallet that\n     *                will sign the transaction.\n     * @param opts    Transaction confirmation options.\n     */\n\n  }, {\n    key: \"simulate\",\n    value: function () {\n      var _simulate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(tx, signers) {\n        var opts,\n            _a,\n            _b,\n            _c,\n            _args3 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                opts = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : this.opts;\n\n                if (signers === undefined) {\n                  signers = [];\n                }\n\n                tx.feePayer = this.wallet.publicKey;\n                _context3.next = 5;\n                return this.connection.getRecentBlockhash((_a = opts.preflightCommitment) !== null && _a !== void 0 ? _a : this.opts.preflightCommitment);\n\n              case 5:\n                tx.recentBlockhash = _context3.sent.blockhash;\n                _context3.next = 8;\n                return this.wallet.signTransaction(tx);\n\n              case 8:\n                tx = _context3.sent;\n                signers.filter(function (s) {\n                  return s !== undefined;\n                }).forEach(function (kp) {\n                  tx.partialSign(kp);\n                });\n                _context3.next = 12;\n                return simulateTransaction(this.connection, tx, (_c = (_b = opts.commitment) !== null && _b !== void 0 ? _b : this.opts.commitment) !== null && _c !== void 0 ? _c : \"processed\");\n\n              case 12:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function simulate(_x6, _x7) {\n        return _simulate.apply(this, arguments);\n      }\n\n      return simulate;\n    }()\n  }], [{\n    key: \"defaultOptions\",\n    value: function defaultOptions() {\n      return {\n        preflightCommitment: \"processed\",\n        commitment: \"processed\"\n      };\n    }\n    /**\n     * Returns a `Provider` with a wallet read from the local filesystem.\n     *\n     * @param url  The network cluster url.\n     * @param opts The default transaction confirmation options.\n     *\n     * (This api is for Node only.)\n     */\n\n  }, {\n    key: \"local\",\n    value: function local(url, opts) {\n      if (common_js_1.isBrowser) {\n        throw new Error(\"Provider local is not available on browser.\");\n      }\n\n      opts = opts !== null && opts !== void 0 ? opts : Provider.defaultOptions();\n      var connection = new web3_js_1.Connection(url !== null && url !== void 0 ? url : \"http://localhost:8899\", opts.preflightCommitment);\n\n      var NodeWallet = require(\"./nodewallet.js\").default;\n\n      var wallet = NodeWallet.local();\n      return new Provider(connection, wallet, opts);\n    }\n    /**\n     * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment\n     * variable\n     *\n     * (This api is for Node only.)\n     */\n\n  }, {\n    key: \"env\",\n    value: function env() {\n      if (common_js_1.isBrowser) {\n        throw new Error(\"Provider env is not available on browser.\");\n      }\n\n      var process = require(\"process\");\n\n      var url = process.env.ANCHOR_PROVIDER_URL;\n\n      if (url === undefined) {\n        throw new Error(\"ANCHOR_PROVIDER_URL is not defined\");\n      }\n\n      var options = Provider.defaultOptions();\n      var connection = new web3_js_1.Connection(url, options.commitment);\n\n      var NodeWallet = require(\"./nodewallet.js\").default;\n\n      var wallet = NodeWallet.local();\n      return new Provider(connection, wallet, options);\n    }\n  }]);\n\n  return Provider;\n}();\n\nexports.default = Provider; // Copy of Connection.simulateTransaction that takes a commitment parameter.\n\nfunction simulateTransaction(_x8, _x9, _x10) {\n  return _simulateTransaction.apply(this, arguments);\n} // Copy of Connection.sendAndConfirmRawTransaction that throws\n// a better error if 'confirmTransaction` returns an error status\n\n\nfunction _simulateTransaction() {\n  _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(connection, transaction, commitment) {\n    var signData, wireTransaction, encodedTransaction, config, args, res;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return connection._recentBlockhash( // @ts-ignore\n            connection._disableBlockhashCaching);\n\n          case 2:\n            transaction.recentBlockhash = _context4.sent;\n            signData = transaction.serializeMessage(); // @ts-ignore\n\n            wireTransaction = transaction._serialize(signData);\n            encodedTransaction = wireTransaction.toString(\"base64\");\n            config = {\n              encoding: \"base64\",\n              commitment: commitment\n            };\n            args = [encodedTransaction, config]; // @ts-ignore\n\n            _context4.next = 10;\n            return connection._rpcRequest(\"simulateTransaction\", args);\n\n          case 10:\n            res = _context4.sent;\n\n            if (!res.error) {\n              _context4.next = 13;\n              break;\n            }\n\n            throw new Error(\"failed to simulate transaction: \" + res.error.message);\n\n          case 13:\n            return _context4.abrupt(\"return\", res.result);\n\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _simulateTransaction.apply(this, arguments);\n}\n\nfunction sendAndConfirmRawTransaction(_x11, _x12, _x13) {\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\n\nfunction _sendAndConfirmRawTransaction() {\n  _sendAndConfirmRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(connection, rawTransaction, options) {\n    var sendOptions, signature, status;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            sendOptions = options && {\n              skipPreflight: options.skipPreflight,\n              preflightCommitment: options.preflightCommitment || options.commitment\n            };\n            _context5.next = 3;\n            return connection.sendRawTransaction(rawTransaction, sendOptions);\n\n          case 3:\n            signature = _context5.sent;\n            _context5.next = 6;\n            return connection.confirmTransaction(signature, options && options.commitment);\n\n          case 6:\n            status = _context5.sent.value;\n\n            if (!status.err) {\n              _context5.next = 9;\n              break;\n            }\n\n            throw new ConfirmError(\"Raw transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n\n          case 9:\n            return _context5.abrupt(\"return\", signature);\n\n          case 10:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\n\nvar ConfirmError = /*#__PURE__*/function (_Error) {\n  _inherits(ConfirmError, _Error);\n\n  function ConfirmError(message) {\n    _classCallCheck(this, ConfirmError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ConfirmError).call(this, message));\n  }\n\n  return ConfirmError;\n}(_wrapNativeSuper(Error));\n/**\n * Sets the default provider on the client.\n */\n\n\nfunction setProvider(provider) {\n  _provider = provider;\n}\n\nexports.setProvider = setProvider;\n/**\n * Returns the default provider being used by the client.\n */\n\nfunction getProvider() {\n  if (_provider === null) {\n    return Provider.local();\n  }\n\n  return _provider;\n}\n\nexports.getProvider = getProvider; // Global provider used as the default when a provider is not given.\n\nvar _provider = null;","map":null,"metadata":{},"sourceType":"script"}