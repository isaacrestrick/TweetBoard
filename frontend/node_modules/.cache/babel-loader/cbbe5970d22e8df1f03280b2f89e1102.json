{"ast":null,"code":"import _regeneratorRuntime from \"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/src/App.js\";\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { TwitterTweetEmbed } from 'react-twitter-embed';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport idl from './idl.json';\nimport kp from './keypair.json'; // SystemProgram is a reference to the Solana runtime!\n\nvar SystemProgram = web3.SystemProgram,\n    Keypair = web3.Keypair; // Create a keypair for the account that will hold the GIF data.\n\nvar arr = Object.values(kp._keypair.secretKey);\nvar secret = new Uint8Array(arr);\nvar baseAccount = web3.Keypair.fromSecretKey(secret); // Get our program's id from the IDL file.\n\nvar programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nvar network = clusterApiUrl('devnet'); // Controls how we want to acknowledge when a transaction is \"done\".\n\nvar opts = {\n  preflightCommitment: \"processed\"\n};\nvar TEST_GIFS = ['https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp', 'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g', 'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g', 'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'];\n\nfunction getTweetID(tweetURL) {\n  var pathComponents = tweetURL.split(\"/\");\n  var idWithQuery = pathComponents[pathComponents.length - 1];\n  var tweetId = idWithQuery.split(\"?\")[0];\n  return tweetId;\n}\n\nvar App = function App() {\n  // State\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      walletAddress = _useState2[0],\n      setWalletAddress = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputValue = _useState4[0],\n      setInputValue = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      gifList = _useState6[0],\n      setGifList = _useState6[1];\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n\n\n  var checkIfWalletIsConnected = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _window, solana, response;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _window = window, solana = _window.solana;\n\n              if (!solana) {\n                _context.next = 12;\n                break;\n              }\n\n              if (!solana.isPhantom) {\n                _context.next = 10;\n                break;\n              }\n\n              console.log('Phantom wallet found!');\n              /*\n               * The solana object gives us a function that will allow us to\n               * connect directly with the user's wallet!\n               */\n\n              _context.next = 7;\n              return solana.connect({\n                onlyIfTrusted: true\n              });\n\n            case 7:\n              response = _context.sent;\n              console.log('Connected with Public Key:', response.publicKey.toString());\n              /*\n               * Set the user's publicKey in state to be used later!\n               */\n\n              setWalletAddress(response.publicKey.toString());\n\n            case 10:\n              _context.next = 13;\n              break;\n\n            case 12:\n              alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n\n            case 13:\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 15]]);\n    }));\n\n    return function checkIfWalletIsConnected() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n\n\n  var connectWallet = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _window2, solana, response;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _window2 = window, solana = _window2.solana;\n\n              if (!solana) {\n                _context2.next = 7;\n                break;\n              }\n\n              _context2.next = 4;\n              return solana.connect();\n\n            case 4:\n              response = _context2.sent;\n              console.log('Connected with Public Key:', response.publicKey.toString());\n              setWalletAddress(response.publicKey.toString());\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function connectWallet() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var sendGif = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var provider, program;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(inputValue.length === 0)) {\n                _context3.next = 3;\n                break;\n              }\n\n              console.log(\"No gif link given!\");\n              return _context3.abrupt(\"return\");\n\n            case 3:\n              setInputValue('');\n              console.log('Gif link:', inputValue);\n              _context3.prev = 5;\n              provider = getProvider();\n              program = new Program(idl, programID, provider);\n              _context3.next = 10;\n              return program.rpc.addGif(inputValue, {\n                accounts: {\n                  baseAccount: baseAccount.publicKey,\n                  user: provider.wallet.publicKey\n                }\n              });\n\n            case 10:\n              console.log(\"GIF successfully sent to program\", inputValue);\n              _context3.next = 13;\n              return getGifList();\n\n            case 13:\n              _context3.next = 18;\n              break;\n\n            case 15:\n              _context3.prev = 15;\n              _context3.t0 = _context3[\"catch\"](5);\n              console.log(\"Error sending GIF:\", _context3.t0);\n\n            case 18:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[5, 15]]);\n    }));\n\n    return function sendGif() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n\n\n  var renderNotConnectedContainer = function renderNotConnectedContainer() {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: \"cta-button connect-wallet-button\",\n      onClick: connectWallet,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 5\n      }\n    }, \"Connect to Wallet\");\n  };\n\n  var onInputChange = function onInputChange(event) {\n    var value = event.target.value;\n    setInputValue(value);\n  };\n\n  var getProvider = function getProvider() {\n    var connection = new Connection(network, opts.preflightCommitment);\n    var provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  var createGifAccount = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var provider, program;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              provider = getProvider();\n              program = new Program(idl, programID, provider);\n              console.log(\"ping\");\n              _context4.next = 6;\n              return program.rpc.startStuffOff({\n                accounts: {\n                  baseAccount: baseAccount.publicKey,\n                  user: provider.wallet.publicKey,\n                  systemProgram: SystemProgram.programId\n                },\n                signers: [baseAccount]\n              });\n\n            case 6:\n              console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n              _context4.next = 9;\n              return getGifList();\n\n            case 9:\n              _context4.next = 14;\n              break;\n\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.log(\"Error creating BaseAccount account:\", _context4.t0);\n\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 11]]);\n    }));\n\n    return function createGifAccount() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var renderConnectedContainer = function renderConnectedContainer() {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"connected-container\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"cta-button submit-gif-button\",\n        onClick: createGifAccount,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }\n      }, \"Do One-Time Initialization For GIF Program Account\"));\n    } // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"connected-container\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          sendGif();\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter gif link!\",\n        value: inputValue,\n        onChange: onInputChange,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"cta-button submit-gif-button\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }\n      }, \"Submit\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"gif-grid\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }\n      }, gifList.map(function (item, index) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"gif-item\",\n          key: index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(TwitterTweetEmbed, {\n          tweetId: getTweetID(item.gifLink),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 17\n          }\n        }));\n      })));\n    }\n  }; //<img src={item.gifLink} />\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n\n\n  useEffect(function () {\n    var onLoad = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return checkIfWalletIsConnected();\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function onLoad() {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    window.addEventListener('load', onLoad);\n    return function () {\n      return window.removeEventListener('load', onLoad);\n    };\n  }, []);\n\n  var getGifList = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var provider, program, account;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              provider = getProvider();\n              program = new Program(idl, programID, provider);\n              _context6.next = 5;\n              return program.account.baseAccount.fetch(baseAccount.publicKey);\n\n            case 5:\n              account = _context6.sent;\n              console.log(\"Got the account\", account);\n              setGifList(account.gifList);\n              _context6.next = 14;\n              break;\n\n            case 10:\n              _context6.prev = 10;\n              _context6.t0 = _context6[\"catch\"](0);\n              console.log(\"Error in getGifList: \", _context6.t0);\n              setGifList(null);\n\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[0, 10]]);\n    }));\n\n    return function getGifList() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList();\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: walletAddress ? 'authed-container' : 'container',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 11\n    }\n  }, \"Something Portal\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"sub-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }\n  }, \"Something collection\"), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer(), /*#__PURE__*/React.createElement(TwitterTweetEmbed, {\n    tweetId: '933354946111705097',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 11\n    }\n  }, \"That's a lot of tweets\"))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/isaacrestrick/Desktop/solana_tweets/TweetBoard/frontend/src/App.js"],"names":["React","useEffect","useState","Connection","PublicKey","clusterApiUrl","TwitterTweetEmbed","Program","Provider","web3","idl","kp","SystemProgram","Keypair","arr","Object","values","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","metadata","address","network","opts","preflightCommitment","TEST_GIFS","getTweetID","tweetURL","pathComponents","split","idWithQuery","length","tweetId","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","sendGif","provider","getProvider","program","rpc","addGif","accounts","user","wallet","getGifList","renderNotConnectedContainer","onInputChange","event","value","target","connection","createGifAccount","startStuffOff","systemProgram","programId","signers","renderConnectedContainer","preventDefault","map","item","index","gifLink","onLoad","addEventListener","removeEventListener","account","fetch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport {TwitterTweetEmbed} from 'react-twitter-embed';\nimport {\n  Program, Provider, web3\n} from '@project-serum/anchor';\n\nimport idl from './idl.json';\nimport kp from './keypair.json'\n\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\nfunction getTweetID(tweetURL) {\n  const pathComponents = tweetURL.split(\"/\");\n  const idWithQuery = pathComponents[pathComponents.length-1];\n  const tweetId = idWithQuery.split(\"?\")[0];\n  return tweetId\n}\n\nconst App = () => {\n  // State\nconst [walletAddress, setWalletAddress] = useState(null);\nconst [inputValue, setInputValue] = useState('');\nconst [gifList, setGifList] = useState([]);\n\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n\n        /*\n         * The solana object gives us a function that will allow us to\n         * connect directly with the user's wallet!\n         */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n  const { solana } = window;\n\n  if (solana) {\n    const response = await solana.connect();\n    console.log('Connected with Public Key:', response.publicKey.toString());\n    setWalletAddress(response.publicKey.toString());\n  }\n};\n\nconst sendGif = async () => {\n  if (inputValue.length === 0) {\n    console.log(\"No gif link given!\")\n    return\n  }\n  setInputValue('');\n  console.log('Gif link:', inputValue);\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n\n    await program.rpc.addGif(inputValue, {\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: provider.wallet.publicKey,\n      },\n    });\n    console.log(\"GIF successfully sent to program\", inputValue)\n\n    await getGifList();\n  } catch (error) {\n    console.log(\"Error sending GIF:\", error)\n  }\n};\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const onInputChange = (event) => {\n  const { value } = event.target;\n  setInputValue(value);\n};\nconst getProvider = () => {\n  const connection = new Connection(network, opts.preflightCommitment);\n  const provider = new Provider(\n    connection, window.solana, opts.preflightCommitment,\n  );\n\treturn provider;\n}\nconst createGifAccount = async () => {\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    console.log(\"ping\")\n    await program.rpc.startStuffOff({\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: provider.wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      },\n      signers: [baseAccount]\n    });\n    console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n    await getGifList();\n\n  } catch(error) {\n    console.log(\"Error creating BaseAccount account:\", error)\n  }\n}\n\nconst renderConnectedContainer = () => {\n  // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      )\n    } \n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return(\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <TwitterTweetEmbed tweetId={getTweetID(item.gifLink)}/>\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  }\n  //<img src={item.gifLink} />\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n\t\t\t{/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">Something Portal</p>\n          <p className=\"sub-text\">\n            Something collection\n          </p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n        {walletAddress && renderConnectedContainer()}\n        <TwitterTweetEmbed tweetId={'933354946111705097'}/>\n        </div>\n        <div className=\"footer-container\">\n          <p>That's a lot of tweets</p>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default App;"]},"metadata":{},"sourceType":"module"}